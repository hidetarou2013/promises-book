{"version":3,"sources":["../../src/engine/textlint-engine-core.js"],"names":["Promise","require","createFormatter","path","TextLintEngineCore","options","executor","config","initWithAutoLoading","textlint","ruleMap","filterRuleMap","processorMap","moduleLoader","on","Event","rule","ruleName","ruleCreator","defineRule","filterRule","processor","pluginName","Processor","set","loadFromConfig","_setupRules","Error","loadPlugin","presetName","loadPreset","loadRule","loadFilterRule","textlintConfig","toJSON","setupRules","getAllRules","rulesConfig","setupFilterRules","filterRulesConfig","setupProcessors","availableExtensions","processors","reduce","constructor","concat","extensions","resetRules","filerRuleMap","files","boundLintFile","file","lintFile","execFile","onFile","targetFiles","results","map","all","text","ext","boundLintText","lintText","execText","onText","actualExt","extname","length","then","result","formatterConfig","formatterName","color","formatter","onFormat","message","severity","error","some","messages","isErrorMessage","hasRuleAtLeastOne"],"mappings":"AAAA;AACA;;;;;;;;;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;AATA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;AACA,IAAMC,kBAAkBD,QAAQ,oBAAR,CAAxB;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;;AAQA;;;;;;;;;;;;IAYqBG,kB;AACjB;;;;;;;;AAQA,gCAAYC,OAAZ,EAAoC;AAAA;;AAAA,YAAfC,QAAe,uEAAJ,EAAI;;AAAA;;AAChC;;;AAGA,aAAKC,MAAL,GAAc,IAAd;AACA,YAAIF,mCAAJ,EAA+B;AAC3B;AACA,iBAAKE,MAAL,GAAcF,OAAd;AACH,SAHD,MAGO;AACH,iBAAKE,MAAL,GAAc,iBAAOC,mBAAP,CAA2BH,OAA3B,CAAd;AACH;;AAED;;;AAGA,aAAKI,QAAL,GAAgB,2BAAiB,KAAKF,MAAtB,CAAhB;;AAEA;;;;;;AAMA,aAAKD,QAAL,GAAgBA,QAAhB;AACA;;;AAGA,aAAKI,OAAL,GAAe,uBAAf;AACA;;;AAGA,aAAKC,aAAL,GAAqB,uBAArB;AACA;;;AAGA,aAAKC,YAAL,GAAoB,4BAApB;AACA,aAAKC,YAAL,GAAoB,mCAAyB,KAAKN,MAA9B,CAApB;AACA,aAAKM,YAAL,CAAkBC,EAAlB,CAAqB,+BAAqBC,KAArB,CAA2BC,IAAhD,EAAsD,gBAA6B;AAAA;AAAA,gBAA3BC,QAA2B;AAAA,gBAAjBC,WAAiB;;AAC/E,kBAAKR,OAAL,CAAaS,UAAb,CAAwBF,QAAxB,EAAkCC,WAAlC;AACH,SAFD;AAGA,aAAKL,YAAL,CAAkBC,EAAlB,CAAqB,+BAAqBC,KAArB,CAA2BK,UAAhD,EAA4D,iBAA6B;AAAA;AAAA,gBAA3BH,QAA2B;AAAA,gBAAjBC,WAAiB;;AACrF,kBAAKP,aAAL,CAAmBQ,UAAnB,CAA8BF,QAA9B,EAAwCC,WAAxC;AACH,SAFD;AAGA,aAAKL,YAAL,CAAkBC,EAAlB,CAAqB,+BAAqBC,KAArB,CAA2BM,SAAhD,EAA2D,iBAA6B;AAAA;AAAA,gBAA3BC,UAA2B;AAAA,gBAAfC,SAAe;;AACpF,kBAAKX,YAAL,CAAkBY,GAAlB,CAAsBF,UAAtB,EAAkCC,SAAlC;AACH,SAFD;AAGA;AACA,aAAKV,YAAL,CAAkBY,cAAlB,CAAiC,KAAKlB,MAAtC;;AAEA;AACA,aAAKmB,WAAL;AACH;;AAED;;;;;;;gDAGwB;AACpB,kBAAM,IAAIC,KAAJ,sIAAN;AAKH;;AAED;;;;;;;;;mCAMWL,U,EAAY;AACnB,iBAAKT,YAAL,CAAkBe,UAAlB,CAA6BN,UAA7B;AACA,iBAAKI,WAAL;AACH;;AAED;;;;;;;;;mCAMWG,U,EAAY;AACnB,iBAAKhB,YAAL,CAAkBiB,UAAlB,CAA6BD,UAA7B;AACA,iBAAKH,WAAL;AACH;;AAED;;;;;;;;;iCAMST,Q,EAAU;AACf,iBAAKJ,YAAL,CAAkBkB,QAAlB,CAA2Bd,QAA3B;AACA,iBAAKS,WAAL;AACH;;AAED;;;;;;;;;sCAMcT,Q,EAAU;AACpB,iBAAKJ,YAAL,CAAkBmB,cAAlB,CAAiCf,QAAjC;AACA,iBAAKS,WAAL;AACH;;AAED;;;;;;;sCAIc;AACV;AACA,gBAAMO,iBAAiB,KAAK1B,MAAL,GAAc,KAAKA,MAAL,CAAY2B,MAAZ,EAAd,GAAqC,EAA5D;AACA,iBAAKzB,QAAL,CAAc0B,UAAd,CAAyB,KAAKzB,OAAL,CAAa0B,WAAb,EAAzB,EAAqDH,eAAeI,WAApE;AACA,iBAAK5B,QAAL,CAAc6B,gBAAd,CAA+B,KAAK3B,aAAL,CAAmByB,WAAnB,EAA/B,EAAiEH,eAAeM,iBAAhF;AACA;AACA,iBAAK9B,QAAL,CAAc+B,eAAd,CAA8B,KAAK5B,YAAL,CAAkBsB,MAAlB,EAA9B;AACA;AACA;AACA;AACA,iBAAKO,mBAAL,GAA2B,KAAKhC,QAAL,CAAciC,UAAd,CAAyBC,MAAzB,CAAgC,UAACF,mBAAD,EAAsBpB,SAAtB,EAAoC;AAC3F,oBAAME,YAAYF,UAAUuB,WAA5B;AACA,uBAAOH,oBAAoBI,MAApB,CAA2BtB,UAAUkB,mBAAV,EAA3B,CAAP;AACH,aAH0B,EAGxB,KAAKlC,MAAL,CAAYuC,UAHY,CAA3B;AAKH;;AAED;;;;;;;qCAIa;AACT,iBAAKrC,QAAL,CAAcsC,UAAd;AACA,iBAAKrC,OAAL,CAAaqC,UAAb;AACA,iBAAKC,YAAL,CAAkBD,UAAlB;AACH;;AAED;;;;;;;;uCAKeE,K,EAAO;AAAA;;AAClB,gBAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,IAAD,EAAU;AAC5B,uBAAO,OAAK1C,QAAL,CAAc2C,QAAd,CAAuBD,IAAvB,CAAP;AACH,aAFD;AAGA,gBAAME,WAAW,OAAO,KAAK/C,QAAL,CAAcgD,MAArB,KAAgC,UAAhC,GACX,KAAKhD,QAAL,CAAcgD,MAAd,CAAqB,KAAK7C,QAA1B,CADW,GAEXyC,aAFN;AAGA,gBAAMK,cAAc,yBAAUN,KAAV,EAAiB,KAAKR,mBAAtB,CAApB;AACA,gBAAMe,UAAUD,YAAYE,GAAZ,CAAgB,gBAAQ;AACpC,uBAAOJ,SAASF,IAAT,CAAP;AACH,aAFe,CAAhB;AAGA,mBAAOnD,QAAQ0D,GAAR,CAAYF,OAAZ,CAAP;AACH;;AAED;;;;;;;;;;sCAOcG,I,EAAoB;AAAA;;AAAA,gBAAdC,GAAc,uEAAR,MAAQ;;AAC9B,gBAAMC,gBAAgB,SAAhBA,aAAgB,CAACV,IAAD,EAAOS,GAAP,EAAe;AACjC,uBAAO,OAAKnD,QAAL,CAAcqD,QAAd,CAAuBX,IAAvB,EAA6BS,GAA7B,CAAP;AACH,aAFD;AAGA,gBAAMnD,WAAW,KAAKA,QAAtB;AACA,gBAAMsD,WAAW,OAAO,KAAKzD,QAAL,CAAc0D,MAArB,KAAgC,UAAhC,GACX,KAAK1D,QAAL,CAAc0D,MAAd,CAAqBvD,QAArB,CADW,GAEXoD,aAFN;AAGA;AACA,gBAAMI,YAAYL,IAAI,CAAJ,MAAW,GAAX,GAAiBA,GAAjB,GAAuBzD,KAAK+D,OAAL,CAAaN,GAAb,CAAzC;AACA,gBAAIK,UAAUE,MAAV,KAAqB,CAAzB,EAA4B;AACxB,sBAAM,IAAIxC,KAAJ,CAAU,wCAAV,CAAN;AACH;AACD,mBAAOoC,SAASJ,IAAT,EAAeM,SAAf,EAA0BG,IAA1B,CAA+B,kBAAU;AAC5C,uBAAO,CAACC,MAAD,CAAP;AACH,aAFM,CAAP;AAGH;;AAED;;;;;;;;;;sCAOcb,O,EAAS;AACnB,gBAAMc,kBAAkB;AACpBC,+BAAe,KAAKhE,MAAL,CAAYgE,aADP;AAEpBC,uBAAO,KAAKjE,MAAL,CAAYiE;AAFC,aAAxB;AAIA,gBAAMC,YAAY,OAAO,KAAKnE,QAAL,CAAcoE,QAArB,KAAkC,UAAlC,GACZ,KAAKpE,QAAL,CAAcoE,QAAd,CAAuBJ,eAAvB,CADY,GAEZpE,gBAAgBoE,eAAhB,CAFN;AAGA,mBAAOG,UAAUjB,OAAV,CAAP;AACH;;AAED;;;;;;;;uCAKemB,O,EAAS;AACpB,mBAAOA,QAAQC,QAAR,KAAqB,wBAAcC,KAA1C;AACH;;AAED;;;;;;;;;uCAMerB,O,EAAS;AAAA;;AACpB,mBAAOA,QAAQsB,IAAR,CAAa,kBAAU;AAC1B,uBAAOT,OAAOU,QAAP,CAAgBD,IAAhB,CAAqB,OAAKE,cAA1B,CAAP;AACH,aAFM,CAAP;AAGH;;AAED;;;;;;4CAGoB;AAChB,mBAAO,KAAKtE,OAAL,CAAauE,iBAAb,EAAP;AACH;;;;;;kBA5OgB7E,kB","file":"textlint-engine-core.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst Promise = require(\"bluebird\");\nconst createFormatter = require(\"textlint-formatter\");\nconst path = require(\"path\");\nimport TextLintCore from \"./../textlint-core\";\nimport RuleMap from \"./rule-map\";\nimport ProcessorMap from \"./processor-map\";\nimport Config from \"../config/config\";\nimport {findFiles} from \"../util/find-util\";\nimport TextLintModuleLoader from \"./textlint-module-loader\";\nimport SeverityLevel from \"../shared/type/SeverityLevel\";\n/**\n * Core of TextLintEngine.\n * It is internal user.\n *\n * Hackable adaptor\n *\n * - executeOnFiles\n * - executeOnText\n * - formatResults\n *\n * There are hackable by `executor` option.\n */\nexport default class TextLintEngineCore {\n    /**\n     * Process files are wanted to lint.\n     * TextLintEngine is a wrapper of textlint.js.\n     * Aim to be called from cli with cli options.\n     * @param {Config|Object} [options] the options is command line options or Config object.\n     * @param {{ onFile: Function, onText: Function, onFormat:Function }} [executor] executor are injectable function.\n     * @constructor\n     */\n    constructor(options, executor = {}) {\n        /**\n         * @type {Config}\n         */\n        this.config = null;\n        if (options instanceof Config) {\n            // Almost internal use-case\n            this.config = options;\n        } else {\n            this.config = Config.initWithAutoLoading(options);\n        }\n\n        /**\n         * @type {TextLintCore}\n         */\n        this.textlint = new TextLintCore(this.config);\n\n        /**\n         * @type {{\n         *  onFile: function(textlint: TextlintCore):Function,\n         *  onText: function(textlint: TextlintCore):Function,\n         *  onFormat:Function}}\n         */\n        this.executor = executor;\n        /**\n         * @type {RuleMap} ruleMap is used for linting/fixer\n         */\n        this.ruleMap = new RuleMap();\n        /**\n         * @type {RuleMap} filerRuleMap is used for filtering\n         */\n        this.filterRuleMap = new RuleMap();\n        /**\n         * @type {ProcessorMap}\n         */\n        this.processorMap = new ProcessorMap();\n        this.moduleLoader = new TextLintModuleLoader(this.config);\n        this.moduleLoader.on(TextLintModuleLoader.Event.rule, ([ruleName, ruleCreator]) => {\n            this.ruleMap.defineRule(ruleName, ruleCreator);\n        });\n        this.moduleLoader.on(TextLintModuleLoader.Event.filterRule, ([ruleName, ruleCreator]) => {\n            this.filterRuleMap.defineRule(ruleName, ruleCreator);\n        });\n        this.moduleLoader.on(TextLintModuleLoader.Event.processor, ([pluginName, Processor]) => {\n            this.processorMap.set(pluginName, Processor);\n        });\n        // load rule/plugin/processor\n        this.moduleLoader.loadFromConfig(this.config);\n\n        // set settings to textlint core\n        this._setupRules();\n    }\n\n    /**\n     * @deprecated remove this method\n     */\n    setRulesBaseDirectory() {\n        throw new Error(`Should not use setRulesBaseDirectory(), insteadof use         \nnew TextLintEngine({\n rulesBaseDirectory: directory\n})\n        `);\n    }\n\n    /**\n     * load plugin manually\n     * Note: it high cost, please use config\n     * @param {string} pluginName\n     * @deprecated use Constructor(config) insteadof it\n     */\n    loadPlugin(pluginName) {\n        this.moduleLoader.loadPlugin(pluginName);\n        this._setupRules();\n    }\n\n    /**\n     * load plugin manually\n     * Note: it high cost, please use config\n     * @param {string} presetName\n     * @deprecated use Constructor(config) insteadof it\n     */\n    loadPreset(presetName) {\n        this.moduleLoader.loadPreset(presetName);\n        this._setupRules();\n    }\n\n    /**\n     * load rule manually\n     * Note: it high cost, please use config\n     * @param {string} ruleName\n     * @deprecated use Constructor(config) insteadof it\n     */\n    loadRule(ruleName) {\n        this.moduleLoader.loadRule(ruleName);\n        this._setupRules();\n    }\n\n    /**\n     * load filter rule manually\n     * Note: it high cost, please use config\n     * @param {string} ruleName\n     * @deprecated use Constructor(config) insteadof it\n     */\n    loadFilerRule(ruleName) {\n        this.moduleLoader.loadFilterRule(ruleName);\n        this._setupRules();\n    }\n\n    /**\n     * Update rules from current config\n     * @private\n     */\n    _setupRules() {\n        // set Rules\n        const textlintConfig = this.config ? this.config.toJSON() : {};\n        this.textlint.setupRules(this.ruleMap.getAllRules(), textlintConfig.rulesConfig);\n        this.textlint.setupFilterRules(this.filterRuleMap.getAllRules(), textlintConfig.filterRulesConfig);\n        // set Processor\n        this.textlint.setupProcessors(this.processorMap.toJSON());\n        // execute files that are filtered by availableExtensions.\n        // TODO: it very hackable way, should be fixed\n        // it is depend on textlintCore's state\n        this.availableExtensions = this.textlint.processors.reduce((availableExtensions, processor) => {\n            const Processor = processor.constructor;\n            return availableExtensions.concat(Processor.availableExtensions());\n        }, this.config.extensions);\n\n    }\n\n    /**\n     * Remove all registered rule and clear messages.\n     * @private\n     */\n    resetRules() {\n        this.textlint.resetRules();\n        this.ruleMap.resetRules();\n        this.filerRuleMap.resetRules();\n    }\n\n    /**\n     * Executes the current configuration on an array of file and directory names.\n     * @param {String[]}  files An array of file and directory names.\n     * @returns {Promise<TextLintResult[]>} The results for all files that were linted.\n     */\n    executeOnFiles(files) {\n        const boundLintFile = (file) => {\n            return this.textlint.lintFile(file);\n        };\n        const execFile = typeof this.executor.onFile === \"function\"\n            ? this.executor.onFile(this.textlint)\n            : boundLintFile;\n        const targetFiles = findFiles(files, this.availableExtensions);\n        const results = targetFiles.map(file => {\n            return execFile(file);\n        });\n        return Promise.all(results);\n    }\n\n    /**\n     * If want to lint a text, use it.\n     * But, if you have a target file, use {@link executeOnFiles} instead of it.\n     * @param {string} text linting text content\n     * @param {string} ext ext is a type for linting. default: \".txt\"\n     * @returns {Promise<TextLintResult[]>}\n     */\n    executeOnText(text, ext = \".txt\") {\n        const boundLintText = (file, ext) => {\n            return this.textlint.lintText(file, ext);\n        };\n        const textlint = this.textlint;\n        const execText = typeof this.executor.onText === \"function\"\n            ? this.executor.onText(textlint)\n            : boundLintText;\n        // filePath or ext\n        const actualExt = ext[0] === \".\" ? ext : path.extname(ext);\n        if (actualExt.length === 0) {\n            throw new Error(\"should specify the extension.\\nex) .md\");\n        }\n        return execText(text, actualExt).then(result => {\n            return [result];\n        });\n    }\n\n    /**\n     * format {@link results} and return output text.\n     * @param {TextLintResult[]} results the collection of result\n     * @returns {string} formatted output text\n     * @example\n     *  console.log(formatResults(results));\n     */\n    formatResults(results) {\n        const formatterConfig = {\n            formatterName: this.config.formatterName,\n            color: this.config.color\n        };\n        const formatter = typeof this.executor.onFormat === \"function\"\n            ? this.executor.onFormat(formatterConfig)\n            : createFormatter(formatterConfig);\n        return formatter(results);\n    }\n\n    /**\n     * Checks if the given message is an error message.\n     * @param {TextLintMessage} message The message to check.\n     * @returns {boolean} Whether or not the message is an error message.\n     */\n    isErrorMessage(message) {\n        return message.severity === SeverityLevel.error;\n    }\n\n    /**\n     * Checks if the given results contain error message.\n     * If there is even one error then return true.\n     * @param {TextLintResult[]} results Linting result collection\n     * @returns {Boolean} Whether or not the results contain error message.\n     */\n    isErrorResults(results) {\n        return results.some(result => {\n            return result.messages.some(this.isErrorMessage);\n        });\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    hasRuleAtLeastOne() {\n        return this.ruleMap.hasRuleAtLeastOne();\n    }\n}\n"]}