{"version":3,"sources":["../src/parse-to-ast.js"],"names":[],"mappings":";AACA;;;;;QAKgB,K,GAAA,K;;AAJhB;;AACA;;AACA;;;;AACA;;;;;;AACO,SAAS,KAAT,CAAe,IAAf,EAAqB;;;;;;;;;;;;AAYxB,QAAM,SAAS,oCAAkB,IAAlB,CAAf;AACA,QAAM,YAAY,wBAAc,MAAd,CAAlB;AACA,QAAM,SAAS,+BAAqB,IAArB,CAAf;AACA,QAAM,cAAc,0BAAgB,EAAC,cAAD,EAAS,UAAT,EAAhB,CAApB;AACA,cAAU,QAAV,CAAmB;AACf,aADe,uBACC;AAAA,gBAAT,OAAS,QAAT,OAAS;;AACZ,wBAAY,UAAZ,CAAuB,OAAvB;AACH,SAHc;AAIf,aAJe,wBAIC;AAAA,gBAAT,OAAS,SAAT,OAAS;;AACZ,wBAAY,SAAZ,CAAsB,OAAtB;AACH;AANc,KAAnB;AAQA,WAAO,YAAY,QAAZ,EAAP;AACH","file":"parse-to-ast.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {createTokenStream} from \"./token-stream\";\nimport {Traverser} from \"./traverse\"\nimport StructuredSource  from \"structured-source\";\nimport NodeBuilder from \"./NodeBuilder\";\nexport function parse(text) {\n    /*\n    Work Flow\n    1. Parse text as tokens\n    2. Traverse token\n    3. Build AST from token\n    \n    Limitation:\n    \n    Token is based on textmate bundle.\n    It is RegExp based.\n     */\n    const tokens = createTokenStream(text);\n    const traverser = new Traverser(tokens);\n    const source = new StructuredSource(text);\n    const nodeBuilder = new NodeBuilder({source, text});\n    traverser.traverse({\n        enter({current}){\n            nodeBuilder.enterToken(current);\n        },\n        leave({current}){\n            nodeBuilder.exitToken(current);\n        }\n    });\n    return nodeBuilder.builtAST();\n}"]}