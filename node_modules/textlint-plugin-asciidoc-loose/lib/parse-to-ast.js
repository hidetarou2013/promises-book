// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parse = parse;

var _tokenStream = require("./token-stream");

var _traverse = require("./traverse");

var _structuredSource = require("structured-source");

var _structuredSource2 = _interopRequireDefault(_structuredSource);

var _NodeBuilder = require("./NodeBuilder");

var _NodeBuilder2 = _interopRequireDefault(_NodeBuilder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(text) {
    /*
    Work Flow
    1. Parse text as tokens
    2. Traverse token
    3. Build AST from token
    
    Limitation:
    
    Token is based on textmate bundle.
    It is RegExp based.
     */
    var tokens = (0, _tokenStream.createTokenStream)(text);
    var traverser = new _traverse.Traverser(tokens);
    var source = new _structuredSource2.default(text);
    var nodeBuilder = new _NodeBuilder2.default({ source: source, text: text });
    traverser.traverse({
        enter: function enter(_ref) {
            var current = _ref.current;

            nodeBuilder.enterToken(current);
        },
        leave: function leave(_ref2) {
            var current = _ref2.current;

            nodeBuilder.exitToken(current);
        }
    });
    return nodeBuilder.builtAST();
}
//# sourceMappingURL=parse-to-ast.js.map