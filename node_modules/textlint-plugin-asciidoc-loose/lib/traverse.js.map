{"version":3,"sources":["../src/traverse.js"],"names":[],"mappings":"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","file":"traverse.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport TokenSeeker from \"./TokenSeeker\";\nconst identity = (arg) => {\n    return arg;\n};\n\n/*\n - Inline Block\n - Header, List ...\n - reset each line\n - Block\n - Source Code Block...\n - reset each end block\n */\nclass Blocker {\n    constructor({blockNodeNameList}) {\n        this.blockNodeNameList = blockNodeNameList;\n    }\n\n    beginNode(token) {\n        const blockNodeNameList = this.blockNodeNameList;\n        for (let i = 0; i < blockNodeNameList.length; i++) {\n            const blockNode = blockNodeNameList[i];\n            const begin = blockNode.begin;\n            const targetScopes = token.scopes;\n            if (targetScopes.indexOf(begin) !== -1) {\n                return blockNode;\n            }\n        }\n    }\n\n    getBeginType(token) {\n        const beginNode = this.beginNode(token);\n        return beginNode ? beginNode.type : null;\n    }\n\n    getEndType(token) {\n        const endNode = this.endNode(token);\n        return endNode ? endNode.type : null;\n    }\n\n    endNode(token) {\n        const blockNodeNameList = this.blockNodeNameList;\n        for (let i = 0; i < blockNodeNameList.length; i++) {\n            const blockNode = blockNodeNameList[i];\n            const end = blockNode.end;\n            const targetScopes = token.scopes;\n            if (targetScopes.indexOf(end) !== -1) {\n                return blockNode;\n            }\n        }\n    }\n\n    isBegin(token) {\n        const beginNode = this.beginNode(token);\n        return beginNode !== undefined;\n    }\n\n    isEnd(token) {\n        const endNode = this.endNode(token);\n        return endNode !== undefined;\n    }\n}\nclass InlineBlocker {\n    constructor({inlineBlockNodeNameList}) {\n        this.inlineBlockNodeNameList = inlineBlockNodeNameList;\n    }\n\n    inlineNode(node) {\n        const matchNode = this.inlineBlockNodeNameList.filter(({begin}) => {\n            const scopes = node.scopes;\n            return begin.every(scopeName => {\n                return scopes.indexOf(scopeName) !== -1;\n            });\n        });\n        return matchNode.length !== 0 ? matchNode[0] : null;\n    }\n\n    getNodeType(node) {\n        const inlineNode = this.inlineNode(node);\n        return inlineNode !== null ? inlineNode.type : null;\n    }\n\n    testInlineBlock(node) {\n        const inlineNode = this.inlineNode(node);\n        return inlineNode !== null;\n    };\n}\nconst blockNodeNameList = [\n    {\n        \"type\": \"Header\",\n        \"begin\": \"punctuation.definition.attributelistline.begin.asciidoc\",\n        \"end\": \"punctuation.definition.attributelistline.end.asciidoc\"\n    },\n    {\n        /*\n         ....\n         Lorem ipsum.\n         ....\n\n         pre\n         */\n        \"type\": \"CodeBlock\",\n        \"begin\": \"constant.delimiter.block.literal.begin.asciidoc\",\n        \"end\": \"constant.delimiter.block.literal.end.asciidoc\"\n    },\n    {\n        \"type\": \"Comment\",\n        \"begin\": \"punctuation.definition.comment.begin.asciidoc\",\n        \"end\": \"punctuation.definition.comment.end.asciidoc\"\n    },\n    {\n        \"type\": \"List\",\n        \"begin\": \"constant.delimiter.listing.begin.asciidoc\",\n        \"end\": \"constant.delimiter.listing.end.asciidoc\"\n    },\n    {\n        /*\n         ****\n         Lorem ipsum\n         ****\n         */\n        \"type\": \"Paragraph\",\n        \"begin\": \"constant.delimiter.block.sidebar.begin.asciidoc\",\n        \"end\": \"constant.delimiter.block.sidebar.end.asciidoc\"\n    },\n    {\n        \"begin\": \"constant.delimiter.block.passthrough.begin.asciidoc\",\n        \"end\": \"constant.delimiter.block.passthrough.end.asciidoc\"\n    },\n    {\n        \"type\": \"BlockQuote\",\n        \"begin\": \"constant.delimiter.block.quote.begin.asciidoc\",\n        \"end\": \"constant.delimiter.block.quote.end.asciidoc\"\n    },\n    {\n        /*\n         ====\n         Lorem ipsum.\n         ====\n         */\n        \"type\": \"Paragraph\",\n        \"begin\": \"constant.delimiter.example.begin.asciidoc\",\n        \"end\": \"constant.delimiter.example.end.asciidoc\"\n    },\n    {\n        /*\n         --\n         Lorem ipsum\n         --\n         */\n        \"type\": \"CodeBlock\",\n        \"begin\": \"constant.delimiter.block.open.begin.asciidoc\",\n        \"end\": \"constant.delimiter.block.open.end.asciidoc\"\n    }\n];\nconst getStrType = (node) => {\n    return node.scopes.join(\",\") === ['text.asciidoc'].join(\",\") ? \"Str\" : null;\n};\nconst inlineBlockNodeNameList = [\n    // #section_titles\n    {\n        \"type\": \"Header\",\n        \"begin\": [\n            \"punctuation.definition.heading.asciidoc\"\n        ]\n    },\n    // #ulist_item_marker\n    {\n        \"begin\": [\n            \"string.unquoted.list.bullet.asciidoc\",\n            \"constant.numeric.list.bullet.asciidoc\"\n        ]\n    },\n    // #comment\n    {\n        \"type\": \"Comment\",\n        \"begin\": [\n            \"punctuation.definition.comment.line.asciidoc\",\n            \"meta.line.comment.content.asciidoc\"\n        ]\n    },\n    // #block_title\n    {\n        \"type\": \"Paragraph\",\n        \"begin\": [\n            \"punctuation.definition.blockheading.asciidoc\"\n        ]\n    }\n\n];\n\nexport class Traverser {\n    constructor(tokens) {\n        this.seeker = Array.isArray(tokens) ? new TokenSeeker(tokens) : tokens;\n    }\n\n    traverse({enter = identity, leave = identity}) {\n        const currentLineStack = [];\n        const currentBlockStack = [];\n        const blocker = new Blocker({blockNodeNameList});\n        const inlineBlocker = new InlineBlocker({inlineBlockNodeNameList})\n        let isInBlock = false;\n        while (this.seeker.hasNextToken()) {\n            const token = this.seeker.nextToken();\n            token.type = blocker.getBeginType(token) || blocker.getEndType(token) || inlineBlocker.getNodeType(token) || getStrType(token);\n            // Block Element\n            if (blocker.isBegin(token)) {\n                isInBlock = true;\n                enter({\n                    current: token,\n                    type: blocker.getBeginType(token)\n                });\n                continue;\n            } else if (blocker.isEnd(token)) {\n                isInBlock = false;\n                const parentToken = currentBlockStack[0];\n                while (currentBlockStack.length) {\n                    const lastToken = currentBlockStack.pop();\n                    leave({\n                        current: lastToken,\n                        parent: parentToken,\n                        type: blocker.getEndType(token)\n                    });\n                }\n                leave({\n                    current: token,\n                    type: blocker.getEndType(token)\n                });\n                continue;\n            } else if (isInBlock) {\n                const parentToken = currentBlockStack[0];\n                currentBlockStack.push(token);\n                enter({\n                    current: token,\n                    parent: parentToken,\n                    type: blocker.getBeginType(token)\n                });\n                continue;\n            }\n            // Inline Block\n            if (inlineBlocker.testInlineBlock(token)) {\n                currentLineStack.push(token);\n                enter({\n                    current: token,\n                    type: blocker.getBeginType(token)\n                });\n                continue;\n            } else if (currentLineStack.length > 0) {\n                const firstToken = currentLineStack[0];\n                if (firstToken.loc.start.line !== token.loc.start.line) {\n                    while (currentLineStack.length) {\n                        const lastToken = currentLineStack.pop();\n                        leave({\n                            current: lastToken,\n                            parent: firstToken,\n                            type: blocker.getEndType(lastToken)\n                        });\n                    }\n                }\n                const parentToken = currentLineStack[0];\n                currentLineStack.push(token);\n                enter({\n                    current: token,\n                    parent: parentToken\n                });\n\n                continue;\n\n            } else {\n                const parentToken = currentLineStack[0];\n                enter({\n                    current: token,\n                    parent: parentToken,\n                    type: blocker.getBeginType(token)\n                });\n                continue;\n            }\n        }\n        // finish\n        while (currentLineStack.length > 0) {\n            const lastToken = currentLineStack.pop();\n            leave({\n                current: lastToken,\n                type: blocker.getEndType(lastToken)\n            });\n        }\n    }\n}"]}