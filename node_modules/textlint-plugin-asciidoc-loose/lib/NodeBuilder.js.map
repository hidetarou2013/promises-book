{"version":3,"sources":["../src/NodeBuilder.js"],"names":[],"mappings":"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","file":"NodeBuilder.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/**\n * create paragraph node from TxtNodes.\n * @param {TxtNode[]} nodes - Child nodes\n * @return {TxtNode} Paragraph node\n */\nfunction createParagraphNode(nodes) {\n    return {\n        type: \"Paragraph\",\n        children: nodes || []\n    };\n}\nfunction createBlockNode(token) {\n    return {\n        type: token.type,\n        children: []\n    };\n}\n/**\n * fill properties of paragraph node.\n * @param {TxtNode} node - Paragraph node to modify\n * @param {string} fullText - Full text of the document\n */\nfunction fixParagraphNode(node, fullText) {\n    const firstNode = node.children[0];\n    const lastNode = node.children[node.children.length - 1];\n    node.range = [firstNode.range[0], lastNode.range[1]];\n    node.raw = fullText.slice(node.range[0], node.range[1]);\n    node.loc = {\n        start: {\n            line: firstNode.loc.start.line,\n            column: firstNode.loc.start.column\n        },\n        end: {\n            line: lastNode.loc.end.line,\n            column: lastNode.loc.end.column\n        }\n    };\n}\nexport default class NodeBuilder {\n    constructor({source, text}) {\n        const range = [0, text.length];\n        this.AST = {\n            type: \"Document\",\n            raw: text,\n            range: range,\n            loc: source.rangeToLocation(range),\n            children: []\n        };\n        this.text = text;\n        this.source = source;\n        this.currentParentNode = this.AST;\n        this.currentStrStack = [];\n    }\n\n    builtAST() {\n        this.wrapStrWithParagraph();\n        this.AST.children.forEach((node) => {\n            if (node.type == \"Paragraph\") {\n                fixParagraphNode(node, this.text);\n            }\n        });\n        return this.AST;\n    }\n\n    addNodeToRoot(node) {\n        this.AST.children.push(node);\n    }\n\n    backParentToRoot() {\n        this.currentParentNode = this.AST;\n    }\n\n    setCurrentParentNode(token) {\n        this.currentParentNode = createBlockNode(token);\n        this.addNodeToRoot(this.currentParentNode);\n    }\n\n    isInBlock() {\n        return this.currentParentNode !== null\n    }\n\n    pushStrToCurrentStack(token) {\n        // create range and raw\n        token.raw = this.text.slice(token.startIndex, token.endIndex);\n        token.value = token.raw;\n        token.range = [token.startIndex, token.endIndex];\n        delete token.startIndex;\n        delete token.endIndex;\n        this.currentStrStack.push(token);\n    }\n\n    wrapStrWithParagraph() {\n        if (this.currentStrStack.length === 0) {\n            return;\n        }\n        const paragraph = createParagraphNode(this.currentStrStack);\n        this.currentParentNode.children.push(paragraph);\n        this.currentStrStack = [];\n    }\n\n    enterToken(token) {\n        switch (token.type) {\n            case \"Str\":\n                return this.pushStrToCurrentStack(token);\n            // case \"Paragraph\":\n            // case \"Header\":\n            // case \"List\":\n            //     return this.setCurrentParentNode(token);\n            default:\n                this.wrapStrWithParagraph();\n        }\n    }\n\n    exitToken(token) {\n        // switch (token.type) {\n        //     case \"Paragraph\":\n        //     case \"Header\":\n        //     case \"List\":\n        //         this.wrapStrWithParagraph();\n        //         return this.backParentToRoot();\n        // }\n    }\n}"]}